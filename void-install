#!/usr/bin/env bash
#shellcheck disable=SC2145,SC2001,SC2188,SC2015,SC2155,SC2317,SC2320

#  void-install
#  Created: 2022/12/24
#  Altered: 2023/01/02
#
#  Copyright (c) 2022-2022, Vilmar Catafesta <vcatafesta@gmail.com>
#                2022-2022, Felipe Nogueira <contato.fnog@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#debug
#export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

#system
APP="${0##*/}"
_VERSION_='1.43.20230102'
readonly DEPENDENCIES=(tar wget sed cat grep chroot tput printf blkid fdisk mkfs.ext2 mkfs.ext3 mkfs.ext4 mkfs.ext2 mkfs.btrfs mkfs.xfs mkfs.vfat dialog sfdisk lsblk parted)
declare -A AsUser
declare -i quiet=0 grafico=0
declare -i LAUTO=0 LINSTALL=0 LCHROOT=0 LBIND=0
declare _DEVICE='/dev/loop11'
declare _PART_BIOS="${_DEVICE}p1"
declare _PART_BOOT="${_DEVICE}p2"
declare _PART_ROOT="${_DEVICE}p3"
declare _USER="void"
declare _USER_FULLNAME=""
declare _PASSWD_USER="void"
declare _PASSWD_ROOT="voidlinux"
declare _HOSTNAME="voidlinux"

sh_ambiente() {
	#export LC_ALL=C
	#export LANG=C
	readonly cnickefi='void'
	readonly dir_install='/mnt/voidlinux'
	readonly app_conf='void-install.conf'
	readonly url_google='https://google.com'
	readonly url_mirror='http://void.chililinux.com/voidlinux'
	readonly cmsgusermanager="$APP v$_VERSION_ configuracao"
	readonly ccreatenewuser='Configurações'
	readonly cmsgadduser='Criando usuario'
	readonly cmsgchgpasswd='Ajustando senha'
	readonly cdisco='Escolha DISCO destino'
 	readonly cchoosedisk='Escolha o disco:'
	readonly cmsg_part_disk='Visualizar partições do disco'
	readonly cmsgpart='Particionamento automatico'
	readonly cwarning='** AVISO **'
	readonly cmsg_all_mounted_part='O disco selecionado contém partições montadas'
	readonly cmsgSetKeyboardLayout='Definir outro layout do teclado'
	readonly cmsg_umount_partition='Aguarde, Desmontando particao de trabalho'
	readonly buttonback='Finalizar'
   readonly buttonpart='Info disco'
	readonly yeslabel='Sim'
   readonly nolabel='Não'
	readonly true=1
	readonly false=0
	readonly err_fatal=1
	readonly err_not_fatal=0
	readonly shell='/bin/sh'
	readonly BOOTLOG="/tmp/void-install-$(sh_diahora).log"
	: "${mkfs='EXT4'}"
	: "${mbr='BIOS'}"
	: "${dm='lxdm'}"
	: "${lEFI=$false}"
	: "${ccabec="$APP v${_VERSION_}"}"
	: "${DIALOG=${DIALOG:-"dialog"}}"
	# flag dialog exit status codes
   : "${D_OK=0}"
   : "${D_CANCEL=1}"
   : "${D_HELP=2}"
   : "${D_EXTRA=3}"
   : "${D_ITEM_HELP=4}"
   : "${D_ESC=255}"
	: echo "$err_fatal"
	: echo "$LAUTO"
	: echo "$pink"
	: echo "$cwarning"
	: echo "$cmsgchgpasswd"

	if [ -z "${COLUMNS}" ]; then
   	COLUMNS=$(stty size)
	   COLUMNS=${COLUMNS##* }
	fi
	if [ "${COLUMNS}" = "0" ]; then
   	COLUMNS=80
	fi
	COL=$((COLUMNS - 8))
	SET_COL="\\033[${COL}G" # at the $COL char
	CURS_ZERO="\\033[0G"
}

sh_touchconf(){
   cat > "$app_conf" <<- EOF
######################################################################
# void-install.conf
# Gerado por void-install
######################################################################
_DEVICE="$_DEVICE"
_PART_BIOS="$_PART_BIOS"
_PART_BOOT="$_PART_BOOT"
_PART_ROOT="$_PART_ROOT"
#_TARBALL_ROOTFS='void-x86_64-ROOTFS-20221001.tar.xz'
#_TARBALL_ROOTFS='void-x86_64-base-minimal-current.tar.xz'
#_TARBALL_ROOTFS='void-x86_64-base-voidstrap-current.tar.xz'
_TARBALL_ROOTFS='void-x86_64-base-system-current.tar.xz'
_USER="$_USER"
_USER_FULLNAME="$_USER_FULLNAME"
_PASSWD_USER="$_PASSWD_USER"
_PASSWD_ROOT="$_PASSWD_ROOT"
_HOSTNAME="$_HOSTNAME"
_TIMEZONE="America/Porto_Velho"
_KEYMAP="br-abnt2"
_CLOCK="UTC"
_PKGS="vim neofetch pfetch openssh grub-x86_64-efi"
#end
EOF
}

sh_config() {
	[[ -s "$app_conf" ]] || sh_touchconf
	# shellcheck source=/dev/null
	if 	[[ -f "$app_conf" ]]
	then 	source "$app_conf"
	else  die "ERRO: falha na abertura de $app_conf!"
	fi
	sh_setadduser
}

sh_ascii_lines() {
	if [[ "$LANG" =~ 'UTF-8' ]]; then
		export NCURSES_NO_UTF8_ACS=0
	else
		export NCURSES_NO_UTF8_ACS=1
	fi
}

sh_checkroot() {
	if [ "$(id -u)" != "0" ]; then
		die "${red} erro: você não pode realizar esta operação a menos que seja root."
	fi
}

sh_checknet() {
   xurl="$1"
   # have internet?
	msg "INFO" "$(log_info_msg "Testando internet em ${xurl}")"
   curl --insecure "$xurl" >/dev/null 2>&1 ||
      {
         evaluate_retval "$?"
         die "Sem rota para o servidor ($xurl) - Check sua conexão com a internet!"
		   return 1
      }
   evaluate_retval "$?"
   return $?
}

sh_checktarball() {
	msg "INFO" "$(log_info_msg "Checando existência do tarball rootfs $_TARBALL_ROOTFS")"
	if ! test -r "$_TARBALL_ROOTFS"; then
	   evaluate_retval "1" "$err_not_fatal"
		msg "INFO" "$(log_info_msg "Iniciando download de $url_mirror/live/current/$_TARBALL_ROOTFS")"
		curl --insecure --silent --remote-name "$url_mirror/live/current/$_TARBALL_ROOTFS" >/dev/null 2>&1 ||
      {
         evaluate_retval "$?"
         die "Sem rota para o servidor ($url_mirror) - Check sua conexão com a internet!"
		   return 1
      }
	fi
	evaluate_retval 0
   return $?
}

sh_checkDependencies() {
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}ERRO${reset}: não encontrei o comando ${cyan}'$d'${reset}"
	done
	if (( errorFound )); then
		echo "---IMPOSSÍVEL CONTINUAR---"
		echo "Esse script precisa dos comandos listados acima" >&2
		echo "Instale-os e/ou verifique se estão no seu \$PATH" >&2
		exit 1
	fi
}

sh_setvarcolors() {
   reset=$(tput sgr0);
	green=$(tput setaf 2);
	red=$(tput setaf 124);
   bold=$(tput bold);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	orange=$(tput setaf 166);
   pink=$(tput setaf 129)
   white=$(tput setaf 15);
  	#yellow=$(tput setaf 136);
   #violet=$(tput setaf 61);
	#purple=$(tput setaf 125);
}

sh_unsetvarcolors() {
   reset=''
	green=''
	red=''
	bold=''
	blue=''
	cyan=''
	orange=''
	pink=''
	white=''
	#yellow=''
	#violet=''
   #purple=''
	sh_logprefix
}

sh_logprefix() {
   NORMAL="${reset}"   # Standard console grey
   SUCCESS="${green}"  # Success is green
   FAILURE="${red}"    # Failures are red
   BRACKET="${blue}"   # Brackets are blue
   BMPREFIX="     "
   SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL}"
   SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
   FAILURE_PREFIX="${FAILURE}  X  ${NORMAL}"
   FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
}

replicate() {
   local Var
   printf -v Var %"$2s" " "  #  Coloca em $Var $1 espaços
   echo "${Var// /$1}"       #  Troca os espaços pelo caractere escolhido
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
}

log_info_msg() {
	#	last_msg="$@"
	last_msg="$*"

	if ! (( quiet )); then
		echo -n -e "${BMPREFIX}${@}"
	fi
	return 0
}

evaluate_retval() {
   local error_value="$?"
	local	error_fatal="$2"
	local	cmsgdie="$3"

	[[ -z "$error_fatal" ]] && error_fatal=$true

   if [ $# -gt 0 ]; then
      error_value="$1"
   fi

	if [ "${error_value}" = 0 ]; then
   	log_success_msg2 ''
	else
   	log_failure_msg2 ''
   fi

	if (( error_value )) ; then
		if (( error_fatal )) ; then
			[[ -z "$cmsgdie" ]] && die "Instalação abortada..." || die "$cmsgdie"
		fi
	fi
	return "${error_value}"
}

log_failure_msg2() {
	if ! (( quiet )); then
	   echo -n -e "${BMPREFIX}${@}"
	   echo    -e  "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
		logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<< "$last_msg")
		echo -e "$(timespec) ${logmessage} OK" >> "${BOOTLOG}"
	fi
	return 0
}

log_success_msg()
{
	if ! (( quiet )); then
		echo -n -e "${BMPREFIX}${@}"
		echo    -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
		logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<< "$last_msg")
		echo -e "$(timespec) ${logmessage} OK" >> "${BOOTLOG}"
	fi
	return 0
}

log_success_msg2() {
	if ! (( quiet )); then
	   echo -n -e "${BMPREFIX}${@}"
	   echo    -e  "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
		logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<< "$last_msg")
		echo -e "$(timespec) ${logmessage} OK" >> "${BOOTLOG}"
	fi
   return 0
}

timespec() {
	STAMP="$(date +"%b %d %T %:z") $(hostname))"
	echo "$STAMP"
	return 0
}

msg() {
   if (( grafico )); then
      ${DIALOG}               \
      --no-collapse           \
      --title     "$1"        \
      --backtitle "$ccabec"   \
      --infobox   "\n$2"      \
      8 60
   else
      log_info_msg "$2"
   fi
}

die() {
	if test $# -ge 2; then
		evaluate_retval 1
	fi
   local msg=$1; shift
	printf "%-75s\n" "$(DOT)${bold}${red}$msg${reset}" >&2
   exit 1
}

readconf()
{
   read -r -p "$1 [Y/n]"
   [[ ${REPLY^} == "" ]] && return $false
   [[ ${REPLY^} == N ]]  && return $true || return $false
}

info() {
	${DIALOG}               			\
	--title  "$1"                    \
	--backtitle "$ccabec"            \
	--msgbox    "$2\n$3\n$4\n$5\n$6" \
	10 60
}

alerta() {
	if (( grafico )); then
		${DIALOG}               			\
		--title  "$1"                    \
		--backtitle "$ccabec"            \
		--msgbox    "$2\n$3\n$4\n$5\n$6" \
		10 60
	else
		log_success_msg "$2"
	fi
}

conf() {
   ${DIALOG}                     \
      --title     "$1"           \
      --backtitle "$ccabec"      \
      --yes-label "$yeslabel"    \
      --no-label  "$nolabel"     \
      --yesno     "$2"           \
      8 60
   return $?
}

conf2() {
	xtitle="$1"
	shift
	${DIALOG}							\
			--title     "$xtitle"	\
			--backtitle "$ccabec"	\
			--yes-label "$yeslabel"	\
			--no-label  "$nolabel"	\
			--yesno     "$*"			\
			10 100
			return $?
}

sh_testdisk(){
	local result=0

	fdisk -l "$_DEVICE" > /dev/null 2>&1
	result="$?"
	if ! (( quiet )); then
		evaluate_retval "$result"
	fi
	return "$result"
}

sh_mkparted(){
	local nchoice=0

	msg "INFO" "$(log_info_msg "Testando disco ${_DEVICE} configurado em $app_conf")"
	if ! sh_testdisk; then
		die "Erro de leitura de disco: $_DEVICE. Check configuração em $app_conf"
	fi

	if ! (( grafico )); then
		if ! (( quiet )); then
			replicate "=" "$COLUMNS"
			if ! fdisk -l "$_DEVICE"; then
				die "Erro de leitura de disco: $_DEVICE. Check configuração em $app_conf"
			fi
			replicate "=" "$COLUMNS"
			echo "${red}AVISO, CUIDADO, tudo será apagado!!${reset}"
			replicate "=" "$COLUMNS"
		fi
	fi

	if ! (( grafico )); then
		if readconf "Continuar com o particionamento em ${_DEVICE} ?"; then
			nchoice=$true
		fi
	else
		if conf "AVISO, CUIDADO, tudo será apagado" "\nContinuar com o particionamento em ${_DEVICE} ?\n" ; then
			nchoice=$true
		fi
	fi
#			mkpart primary fat32      1MiB   200MiB set 1 bios on name 1 BIOS   \
#			mkpart primary fat32      200MiB 500MiB set 2 esp  on name 2 EFI    \
#			mkpart primary ext4       500MiB 100%               name 3 ROOT   \

	if (( nchoice )); then
		msg "INFO" "$(log_info_msg "Criando partições em ${_DEVICE}")"
		parted --script "$_DEVICE" --                                   		\
			mklabel gpt                                                       \
			mkpart primary fat32      1MiB 3MiB   set 1 bios on name 1 BIOS   \
			mkpart primary fat32      3MiB 128MiB set 2 esp  on name 2 EFI    \
			mkpart primary ext4       128MiB 100%               name 3 ROOT   \
			align-check optimal 1
		evaluate_retval "$?"
		#parted --script "$_DEVICE" -- print
	else
		die "Instalação abortada..."
	fi
}

sh_update_mirror() {
	msg "INFO" "$(log_info_msg "Configurando mirror em $_PART_ROOT:$dir_install")"
	cat > "$dir_install/etc/xbps.d/00-reposytory-main.conf" <<- EOF
repository=$url_mirror/current
repository=$url_mirror/current/nonfree
repository=$url_mirror/current/multilib
repository=$url_mirror/current/multilib/nonfree
EOF
	evaluate_retval "$?"
}

sh_update_rc() {
	msg "INFO" "$(log_info_msg "Ajustando rc.local em $_PART_ROOT:$dir_install")"
	cat > "$dir_install"/etc/rc.local <<- EOF
HOSTNAME="${_HOSTNAME}"
HARDWARECLOCK="${_CLOCK}"
TIMEZONE="${_TIMEZONE}"
KEYMAP="${_KEYMAP}"
EOF
	evaluate_retval "$?"
}

sh_update_locale() {
	msg "INFO" "$(log_info_msg "Ajustando locale.conf em $_PART_ROOT:$dir_install")"
	cat > "$dir_install/etc/locale.conf" <<- EOF
LANG=en_US.UTF-8
LC_COLLATE=C
LC_ALL=en_US.UTF-8
EOF
	evaluate_retval "$?"
}

sh_update_hostname() {
	msg "INFO" "$(log_info_msg "Ajustando hostname em $_PART_ROOT:$dir_install")"
	echo "${_HOSTNAME}" > "$dir_install/etc/hostname"
	evaluate_retval "$?"
}

sh_update_timezone() {
	msg "INFO" "$(log_info_msg "Ajustando timezone em $_PART_ROOT:$dir_install")"
	sed -e "/en_US.UTF-8 UTF-8/s/^\#//" -i "$dir_install/etc/default/libc-locales"
	sed -e "/pt_BR.UTF-8 UTF-8/s/^\#//" -i "$dir_install/etc/default/libc-locales"
	ln -sf "$dir_install/usr/share/zoneinfo/${_TIMEZONE}" "$dir_install/etc/localtime"
	evaluate_retval "$?"
}

sh_set_keymap() {
	msg "INFO" "$(log_info_msg "Ajustando teclado ${_KEYMAP} em $_PART_ROOT:$dir_install")"
	[[ ! -e $dir_install/etc/vconsole.conf  ]] && >| $dir_install/etc/vconsole.conf
	if [[ -f $dir_install/etc/vconsole.conf ]]; then
		echo "KEYMAP=$_KEYMAP" >> $dir_install/etc/vconsole.conf
		sed -i -e "s|KEYMAP=.*|KEYMAP=$_KEYMAP|g" $dir_install/etc/vconsole.conf
	else
		sed -i -e "s|#\?KEYMAP=.*|KEYMAP=$_KEYMAP|g" $dir_install/etc/rc.conf
	fi
	evaluate_retval "$?"
}

sh_update_bashrc(){
	msg "INFO" "$(log_info_msg "Ajustando bashrc em $_PART_ROOT:$dir_install")"
   [[ ! -e $dir_install/etc/bash/bashrc.d/bashrc.sh ]] && >| $dir_install/etc/bash/bashrc.d/bashrc.sh
	if [[ -f $dir_install/etc/bash/bashrc.d/bashrc.sh ]]; then
		echo -e "PS1='\e[32;1m\u \e[33;1m→ \e[36;1m\h \e[37;0m\w\n\e[35;1m�# \e[m'" >> "$dir_install/etc/bash/bashrc.d/bashrc.sh"
	fi
	evaluate_retval "$?"
}

sh_update_wpa_suplicant(){
	msg "INFO" "$(log_info_msg "Ajustando wpa_supplicant.conf em $_PART_ROOT:$dir_install")"
   [[ ! -e $dir_install/etc/wpa_supplicant/wpa_supplicant.conf ]] && >| $dir_install/etc/wpa_supplicant/wpa_supplicant.conf
	if [[ -f $dir_install/etc/wpa_supplicant/wpa_supplicant.conf ]]; then
		cat > "$dir_install/etc/wpa_supplicant/wpa_supplicant.conf" <<- EOF
ctrl_interface=/run/wpa_supplicant
ctrl_interface_group=wheel
update_config=1
fast_reauth=1

network={
   ssid="REDE_WIFI"
   psk="SENHA_WIFI"
   mesh_fwding=1
}
EOF
	fi
	evaluate_retval "$?"
}

sh_mkfs() {
#	msg "INFO" "$(log_info_msg "Formatando partição BIOS: ${_PART_BIOS} FS ext2")"
#	mkfs.ext2 -F -L "EFI" "${_PART_BIOS}" > /dev/null 2>&1
#	evaluate_retval "$?"

	msg "INFO" "$(log_info_msg "Formatando partição EFI: ${_PART_BOOT} FS vfat32")"
	mkfs.vfat -n "EFI" -F32 "${_PART_BOOT}" > /dev/null 2>&1
	evaluate_retval

	msg "INFO" "$(log_info_msg "Formatando partição ROOT: ${_PART_ROOT} FS ${mkfs,,}")"
   if [[ "$mkfs" == "EXT2" ]]; then
		mkfs.ext2 -F -L "VOID" "${_PART_ROOT}" > /dev/null 2>&1
   elif [[ "$mkfs" == "EXT3" ]]; then
		mkfs.ext3 -F -L "VOID" "${_PART_ROOT}" > /dev/null 2>&1
   elif [[ "$mkfs" == "EXT4" ]]; then
		mkfs.ext4 -F -L "VOID" "${_PART_ROOT}" > /dev/null 2>&1
   elif [[ "$mkfs" == "BTRFS" ]]; then
		mkfs.btrfs -f -L "VOID" "${_PART_ROOT}" > /dev/null 2>&1
   elif [[ "$mkfs" == "XFS" ]]; then
		mkfs.xfs -f -L "VOID" "${_PART_ROOT}" > /dev/null 2>&1
	fi
	evaluate_retval "$?"
}

sh_umountfs(){
	msg "INFO" "$(log_info_msg "Desmontando sistema de arquivo em $_PART_ROOT:$dir_install")"
	umount -frl "$dir_install" > /dev/null 2>&1
	LBIND=$false
	evaluate_retval "$?" "$err_not_fatal"
}

sh_bind() {
	msg "INFO" "$(log_info_msg "Montando ambiente chroot em $_PART_ROOT:$dir_install")"
	mount -t proc  /proc "$dir_install/proc" > /dev/null 2>&1
	mount -t sysfs /sys  "$dir_install/sys"  > /dev/null 2>&1
	mount -o bind  /dev  "$dir_install/dev"  > /dev/null 2>&1
	LBIND=$true
	evaluate_retval "$?"
}

sh_stopmount() {
   local nchoice
   msg "INFO" "$(log_info_msg "$cmsg_umount_partition")"
   umount -rl "$dir_install" > /dev/null 2>&1
   nchoice=$?
   evaluate_retval 0
   [[ $nchoice -eq 0  || $nchoice -eq 32 ]] && LMOUNT=$false
   [[ $LMOUNT -eq $false ]] && return 0 || return 1
}

ignore_error() {
	"$@" 2>/dev/null
	return 0
}

chroot_maybe_add_mount() {
	local cond=$1; shift
	if eval "$cond"; then
		bindmount "$@"
	fi
}

bindmount() {
	mount "$@" > /dev/null 2>&1
}

sh_initbind() {
   local nchoice

   if ! (( LBIND )); then
      msg "INFO" "$(log_info_msg "Montando ambiente chroot")"
      for i in /proc /sys /dev /dev/pts /dev/shm /run /tmp; do
         mkdir -p "$dir_install$i" > /dev/null 2>&1
      done

      bindmount proc "${dir_install}/proc" -t proc -o nosuid,noexec,nodev &&
      bindmount sys "${dir_install}/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
      ignore_error chroot_maybe_add_mount "[[ -d '$dir_install/sys/firmware/efi/efivars' ]]" \
         efivarfs "$dir_install/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
      bindmount udev "${dir_install}/dev" -t devtmpfs -o mode=0755,nosuid &&
      bindmount devpts "${dir_install}/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
      bindmount shm "${dir_install}/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
      bindmount /run "${dir_install}/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
      bindmount tmp "${dir_install}/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
      evaluate_retval
      nchoice=$?
     [[ $nchoice -eq 0 ]] && LBIND=$true
   fi
   [[ $LBIND -eq $true ]] && return 0 || return 1
}

sh_stopbind()
{
   local nchoice
   msg "INFO" "$(log_info_msg "Desmontando ambiente chroot")"
   umount -r "${dir_install}/proc" > /dev/null 2>&1
   umount -r "${dir_install}/sys" > /dev/null 2>&1
   umount -r "$dir_install/sys/firmware/efi/efivars" > /dev/null 2>&1
   umount -r "${dir_install}/dev/shm" > /dev/null 2>&1
   umount -r "${dir_install}/dev/pts" > /dev/null 2>&1
   umount -r "${dir_install}/dev" > /dev/null 2>&1
   umount -r "${dir_install}/run" > /dev/null 2>&1
   umount -r "${dir_install}/tmp" > /dev/null 2>&1
   nchoice=$?
   evaluate_retval 0
   [[ $nchoice -eq 0 ]] && LBIND=$false
   [[ $LBIND -eq $false ]] && return 0 || return 1
}

sh_chroot_job() {
	local cmsg="$1"
	local cjob="$2"
	local erro_fatal="$3"
	local lretval=0

	msg "INFO" "$(log_info_msg "$cmsg")"
	chroot "$dir_install" "$shell" -c "$cjob" > /dev/null 2>&1
	lretval="$?"
	evaluate_retval "$lretval" "$erro_fatal"
	return "$lretval"
}

sh_mkuser() {
	if [[ -n "${AsUser[cuser]}" ]]; then
		if [[ -n "${AsUser[cfullname]}" ]]; then
			sh_chroot_job "$cmsgadduser: ${AsUser[cuser]} - ${AsUser[cfullname]}" "useradd -m ${AsUser[cuser]} -G ${AsUser[cgroups]} -p ${AsUser[cpass]} -c ""${AsUser[cfullname]}"" > /dev/null 2>&1"
		else
			sh_chroot_job "$cmsgadduser: ${AsUser[cuser]} - ${AsUser[cfullname]}" "useradd -m ${AsUser[cuser]} -G ${AsUser[cgroups]} -p ${AsUser[cpass]}"
		fi
		sh_chroot_job "Ajustando senha usuario : ${AsUser[cuser]}" "(echo ${AsUser[cuser]}:${AsUser[cpass]}) | chpasswd -m > /dev/null 2>&1"
   fi

   if [[ -n "${AsUser[cpassroot]}" ]]; then
		sh_chroot_job "Ajustando senha usuario : root" "(echo root:${AsUser[cpassroot]}) | chpasswd -m > /dev/null 2>&1"
   fi
}

sh_mkfstab() {
	msg "INFO" "$(log_info_msg "Criando fstab em $_PART_ROOT:$dir_install")"
cat > "$dir_install/etc/fstab" <<- EOF
#UUID=$(blkid -o value -s UUID "${_PART_BIOS}") /boot		ext2 defaults 0 2
UUID=$(blkid -o value -s UUID "${_PART_BOOT}") /boot/efi	vfat defaults,noatime 0 2
UUID=$(blkid -o value -s UUID "${_PART_ROOT}") / 			${mkfs,,} defaults 0 1
EOF
	evaluate_retval "$?"
}

sh_mkservice() {
	local aServices=('agetty-tty1' 'agetty-tty2' 'dhcpcd' 'wpa_supplicant' 'udevd' 'uuidd' 'dmeventd' 'sshd' 'lxdm')
	local service

	for service in "${aServices[@]}"
	do
		sh_chroot_job "Ativando serviço $service em $_PART_ROOT:$dir_install" "ln -sf /etc/sv/$service /etc/runit/runsvdir/current/"
	done
}

sh_mkdir() {
	local cdir
	local adir=("$dir_install/boot"
					"$dir_install/boot/efi"
					"$dir_install/dev"
					"$dir_install/proc"
					"$dir_install/sys"
					"$dir_install/var/db/xbps/keys"
					"$dir_install/etc/xbps.d"
					)

	msg "INFO" "$(log_info_msg "Criando diretorios em $_PART_ROOT:$dir_install")"
	for cdir in "${adir[@]}"
	do
		[[ -d "$cdir" ]] || mkdir -p "$cdir"
	done
	evaluate_retval "$?"
}

sh_mountfs() {
	msg "INFO" "$(log_info_msg "Montando sistema de arquivos ROOT em $_PART_ROOT:$dir_install")"
	mkdir -p "$dir_install"
	mount "${_PART_ROOT}" "$dir_install"
	evaluate_retval "$?"

	msg "INFO" "$(log_info_msg "Montando sistema de arquivos EFI em $_PART_ROOT:$dir_install/boot/efi")"
	mkdir -p "$dir_install/boot/efi"
	mount "${_PART_BOOT}" "$dir_install/boot/efi"
	evaluate_retval "$?"
}

sh_fluxboxminimal() {
	local apkgs=(xorg-minimal xinit lxterminal fluxbox fbmenugen dejavu-fonts-ttf xterm rxvt-unicode xfce4-terminal
					 pulseaudio vlc ristretto mupdf setxkbmap Thunar pcmanfm firefox firefox-i18n-pt-BR lxdm)

	sh_chroot_job "Instalando pacotes do fluxbox em $_PART_ROOT:$dir_install" "xbps-install -y ${apkgs[*]}"
#	sh_chroot_job "Gerando menu customizado do fluxbox em $_PART_ROOT:$dir_install" "fbmenugen -i -o /home/${AsUser[cuser]}/.fluxbox/menu" "$err_not_fatal"
	if [[ -f "$dir_install/home/${AsUser[cuser]}/.fluxbox/startup" ]]; then
		sed -e "/xmodmap/s//# xmodmap/" -i "$dir_install/home/${AsUser[cuser]}/.fluxbox/startup" > /dev/null 2>&1
 		sed -e '/\# xmodmap/a setxkbmap br -variant abnt2' -i "$dir_install/home/${AsUser[cuser]}/.fluxbox/startup"
	fi
}

sh_openboxminimal() {
	local apkgs=(xorg-minimal xinit lxterminal openbox dejavu-fonts-ttf xterm rxvt-unicode xfce4-terminal
					 pulseaudio vlc ristretto mupdf setxkbmap Thunar pcmanfm firefox firefox-i18n-pt-BR lxdm)

	sh_chroot_job "Instalando pacotes do openbox em $_PART_ROOT:$dir_install" "xbps-install -y ${apkgs[*]}"
}

sh_backup_partitions() {
	if [ $# -ge 2 ]; then
		local disk="${1}"
		local device="${2}"
		local tmpdir="/tmp/$_APP_"
		local cdatetime
		local filetmp

		cdatetime=$(sh_diahora)
		filetmp="$tmpdir/${device}.$cdatetime.dump"
		mkdir -p "$tmpdir" 2> /dev/null
		sfdisk -d "$disk" > "$filetmp" 2> /dev/null
		#  alerta "BACKUP DA TABELA DE PARTICOES"    \
		#         "Dispositivo : $disk"              \
		#         "  Backup on : ${filetmp}"         \
		#        "$(replicate "=" 80)"               \
		#         "$(cat $filetmp)"
	fi
}

sh_diahora() {
	DIAHORA=$(date +"%d%m%Y-%T" | sed 's/://g')
	printf "%s\n" "$DIAHORA"
}

now() {
	printf "%(%m-%d-%Y %H:%M:%S)T\n" "$(date +%s)"
}

sh_setadduser()
{
   # usuario/senha/hostmame/group
   AsUser[cfullname]="$_USER_FULLNAME"
   AsUser[cuser]="$_USER"
   AsUser[cpass]="$_PASSWD_USER"
   AsUser[cpassroot]="$_PASSWD_ROOT"
   AsUser[chostname]="$_HOSTNAME"
   AsUser[cgroups]="audio,video,wheel,xbuilder"
}

sh_disk_info() {
	unset ARRAY_DSK_{DISKS,DEVICES,SIZE,TRAN,MODEL,LABEL,SERIAL}
	local {NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL}_
	while read -r line
	do
		eval "${line//=/_=}"
#     [[ -z "$TRAN_" ]] && continue
      ARRAY_DSK_DISKS+=( "$NAME_" )
    ARRAY_DSK_DEVICES+=( "$PATH_" )
       ARRAY_DSK_SIZE+=( "$SIZE_" )
#      ARRAY_DSK_TRAN+=( "${TRAN_:-loop}" )
       ARRAY_DSK_TRAN+=( "${TRAN_:-${TYPE_}}" )
      ARRAY_DSK_MODEL+=( "${MODEL_:-unknown}" )
      ARRAY_DSK_LABEL+=( "${LABEL_:-""}" )
      ARRAY_DSK_SERIAL+=( "${SERIAL_:-""}" )
	done < <(lsblk -PAo TYPE,NAME,PATH,SIZE,TRAN,MODEL,LABEL,SERIAL | grep -P 'TYPE="(disk|loop|lvm)"' | sort -k5,5 -k2,2)
}

sh_choosegrub() {
	local cefi='off'
	local cbios='on'
	local cextra

	if sh_bootefi; then
		cefi='on'
		cbios='off'
		cextra="Detectado boot via EFI \n↓ é recomendável instalar ↓"
	else
		cextra="EFI não detectado \n↓ é recomendável instalar BIOS ↓"
	fi

	mbr=$(${DIALOG} --radiolist "Instalacao do GRUB:\n\n$cextra"   \
		0 0 0                                                       \
		EFI     "Interface de Firmaware Extensivel" $cefi           \
		BIOS    "Sistema Básico de Entrada e Saída" $cbios          \
		2>&1 >/dev/tty )

	exit_status=$?
	case $exit_status in
		"$D_ESC"|"$D_CANCEL")
	       "$DIALOG" --clear --backtitle "$ccabec" --yesno "Deseja sair sem instalar?" 0 0
	         case $? in
	            "$D_OK")
	               die "Instalação abortada..."
	               ;;
	            "$D_CANCEL")
	               exit_status=99
						sh_choosegrub
	               ;;
	         esac
			;;
		"$D_OK")
			if ! sh_bootefi; then
				if [[ "$mbr" = "EFI" ]]; then
					info "$ccabec" "$cextra"
					sh_choosegrub
				fi
			fi
			;;
	esac
}

sh_choosefilesystem() {
	local coff='off'
	local con='on'
	local cextra
	local exit_status

	cextra="↓ é recomendável EXT4 ↓"
	mkfs=$(${DIALOG} --radiolist "Escolha o filesystem\n\n$cextra" \
		0 0 0                                                       \
		EXT2     "Linux Ext2 (sem journal)"						"off"	\
		EXT3     "Linux Ext3 (journal)"							"off"	\
		EXT4     "Linux Ext4 - Rápido e maduro (journal)"	"on"	\
		BTRFS    "Oracle Btrfs - Novos recursos - imaturo"	"off"	\
		XFS      "SGI's Xfs - Alto desempenho"					"off"	\
		2>&1 >/dev/tty )

	exit_status=$?
	case $exit_status in
		"$D_ESC"|"$D_CANCEL")
	       "$DIALOG" --clear --backtitle "$ccabec" --yesno "Deseja sair sem instalar?" 0 0
	         case $? in
	            "$D_OK")
	               die "Instalação abortada..."
	               ;;
	            "$D_CANCEL")
	               exit_status=99
						sh_choosefilesystem
	               ;;
	         esac
		;;
	esac
}

sh_choosedisk() {
	while true
	do
		sh_disk_info
		local array=()
		local i
		local n=0
		local nc=0
		local result
		local sep="\xe2\x94\x82"

		for i in "${ARRAY_DSK_DEVICES[@]}"
		do
			array[n++]="$i"
         array[n++]=$(printf "%-6s$sep%6s$sep%-30s" "${ARRAY_DSK_TRAN[$nc]}" "${ARRAY_DSK_SIZE[$nc]}" "${ARRAY_DSK_MODEL[$nc]}")
			((nc++))
		done

    	sd=$(${DIALOG}  																				\
    				--backtitle	 	"$ccabec - Configuração disco destino"					\
    				--title 			"$cdisco"							  							\
    				--cancel-label "$buttonback"													\
    				--colors																				\
	            --extra-button                                                    \
               --extra-label  "$buttonpart"                                      \
    				--menu 			"\n$cchoosedisk" 0 0 10 "${array[@]}" 2>&1 >/dev/tty 	)

    	exit_status=$?
		case $exit_status in
    	"$D_ESC"|"$D_CANCEL")
			"$DIALOG" --clear --backtitle "$ccabec" --yesno "Deseja sair sem instalar?" 0 0
			case $? in
	      	"$D_OK")
					die "Instalação abortada..."
             	break
	            ;;
				"$D_CANCEL")
					exit_status=99
					continue
					;;
			esac
    		;;
		3)
      	result=$(fdisk -l "$sd");
         display_result "$result" "$cmsgpart" "$cmsg_part_disk"
         continue
         ;;
		esac

    	if [[ -n "$sd" ]]; then
			{	local item
            index=0
            for item in "${ARRAY_DSK_DEVICES[@]}"
            do
            	[[ "$item" = "$sd" ]] && { break; }
               ((index++))
            done
			}
			DEVICE_ORIGEM="${ARRAY_DSK_DISKS[index]}"
			MODEL_ORIGEM="${ARRAY_DSK_MODEL[index]}"
			SIZE_ORIGEM="${ARRAY_DSK_SIZE[index]}"
			TRAN_ORIGEM="${ARRAY_DSK_TRAN[index]}"
			_DEVICE="/dev/$DEVICE_ORIGEM"
			if [[ "$TRAN_ORIGEM" == "nvme" || "$TRAN_ORIGEM" == "loop" ]]; then
				_PART_BIOS="${_DEVICE}p1"
				_PART_BOOT="${_DEVICE}p2"
				_PART_ROOT="${_DEVICE}p3"
	      else
				_PART_BIOS="${_DEVICE}1"
				_PART_BOOT="${_DEVICE}2"
				_PART_ROOT="${_DEVICE}3"
      	fi
			sh_checkdisk
			sh_backup_partitions "${sd}" "${DEVICE_ORIGEM}"
			return 0
		fi
    	break
	done
}

sh_checkdisk() {
	local dsk

	msg "INFO" "$(log_info_msg "Aguardando, checando por partições montadas no disco: $_DEVICE")"
	dsk=$(df -h | grep "$_DEVICE" | awk '{print $1, $2, $3, $4, $5, $6, $7}')

	if [[ -n "$dsk" ]]; then
		evaluate_retval "$err_fatal" "$err_fatal" "$cmsg_all_mounted_part: $dsk"
		return 1
	fi
   return 0
}

display_result() {
	local xbacktitle=$ccabec
	if [[ "$3" != "" ]] ; then
		xbacktitle="$3"
	fi
	${DIALOG}   --title  "$2"              \
               --beep                     \
               --no-collapse              \
               --no-cr-wrap               \
               --backtitle "$xbacktitle"  \
               --msgbox    "$1"           \
               00 0
}

sh_confadduser()
{
   while true
   do
      exec 3>&1
         usertext=$(${DIALOG}                         \
         --backtitle       "$cmsgusermanager"         \
         --insecure        "$@"                       \
         --mixedform       "$ccreatenewuser"          \
         0 0 0                                      	\
         "Nome Completo: "                        1 1 "${AsUser[cfullname]}"           1 28 40 0 0 \
         "Username: "                             2 1 "${AsUser[cuser]}"               2 28 20 0 0 \
         "Password user (${AsUser[cpass]}): "     3 1 "${AsUser[cpass]}"               3 28 20 0 1 \
         "Password root (${AsUser[cpassroot]}): " 4 1 "${AsUser[cpassroot]}"           4 28 20 0 1 \
         "Hostname: "                             5 1 "${AsUser[chostname]}"           5 28 20 0 0 \
         "Disco destino: "                        6 1 "${_DEVICE}"                     6 28 20 0 2 \
         "Tam/Modelo: "                           7 1 "${SIZE_ORIGEM}/${MODEL_ORIGEM}" 7 28 20 0 2 \
         "FileSystem: "                           8 1 "${mkfs}"                        8 28 20 0 2 \
         "Teclado: "                              9 1 "${_KEYMAP}"                     9 28 20 0 2 \
         "Window Manager: "                      10 1 "${wm}"                         10 28 20 0 2 \
         2>&1 1>&3)
         exit_status=$?

         case $exit_status in
            "$D_ESC"|"$D_CANCEL")
		         "$DIALOG" --clear --backtitle "$ccabec" --yesno "Deseja sair sem instalar?" 0 0
		         case $? in
		            "$D_OK")
		               die "Instalação abortada..."
		               break
		               ;;
		            "$D_CANCEL")
		               exit_status=99
							continue
		               ;;
		         esac
		         ;;
            "$D_OK")
               mapfile -t <<< "$usertext" aUser
               AsUser[cfullname]="${aUser[0]}"
               AsUser[cuser]="${aUser[1]}"
               AsUser[cpass]="${aUser[2]}"
               AsUser[cpassroot]="${aUser[3]}"
               AsUser[chostname]="${aUser[4]}"
               _HOSTNAME="${aUser[4]}"

               if [[ "${AsUser[cuser]}" == "root" ]]; then
                  if ! conf "*** USER ***" "\nUsuario não pode ser root! Novamente?"; then
                     die "*** USER *** " "Cadastro de usuario cancelado"
                     return 1
                  fi
                  sh_confadduser
               fi

               if [[ -z "${AsUser[cuser]}" ]]; then
                  if ! conf "*** USER ***" "\nUsuario não pode ser vazio! Novamente?"; then
                     die "*** USER *** " "Cadastro de usuario cancelado"
                     return 1
                  fi
                  sh_confadduser
               fi

               if [[ -z "${AsUser[cpass]}" ]]; then
                  if ! conf "*** USER ***" "\nSenha do usuario não pode ser vazia! Novamente?"; then
                     die "*** USER *** " "Cadastro de usuario cancelado"
                     return 1
                 fi
                  sh_confadduser
               fi

               if [[ -z "${AsUser[cpassroot]}" ]]; then
                  if ! conf "*** ROOT ***" "\nSenha de root não pode ser vazia! Novamente?"; then
                     die "*** ROOT *** " "Cadastro de usuario cancelado"
                     return 1
                 fi
                  sh_confadduser
               fi
					_USER_FULLNAME="${AsUser[cfullname]}"
					_USER="${AsUser[cuser]}"
					_PASSWD_USER="${AsUser[cpass]}"
					_PASSWD_ROOT="${AsUser[cpassroot]}"
					_HOSTNAME="${AsUser[chostname]}"
					sh_touchconf
               log_info_msg 'Configurações efetuadas. Prosseguindo com instalação.'
					evaluate_retval "$?"
               ;;
         esac
      exec 3>&-
      return 0
   done
}

sh_dryrun() {
	sh_umountfs
	sh_mountfs
	sh_initbind
	chroot "$dir_install" "$shell"
	sh_umountfs
}

sh_version() {
	printf "%s\n" "${bold}${cyan}${0##*/} v${_VERSION_}${reset}"
}

sh_usage() {
	cat <<EOF
${white}${APP} v$_VERSION_${reset}
${orange}usage: ${APP} ${reset}[<options>]

[<options>] ${reset}
   ${red}-i  --install${cyan}       # Instalar
   ${red}-c  --chroot${cyan}        # Rodar chroot na partição instalada
   ${red}-a  --auto${cyan}          # automatically configure/write in /etc/xbps.d/ with result obtained results
   ${red}-g  --grafico${cyan}       # Ativar modo grafico
   ${red}-q  --quiet${cyan}         # Saida resumida
   ${red}-V  --version${cyan}       # Mostrar versao do aplicativo
   ${red}-n  --nocolor${cyan}       # Remove cores da saida
   ${red}-h  --help${cyan}          # Este help${reset}
EOF
}

init() {
	while test $# -gt 0; do
		case $1 in
			-h | -H | --help)
				sh_usage
				exit $(($# ? 0 : 1))
				;;
			-V | --version)
				sh_version
				exit $(($# ? 0 : 1))
				;;
			-n | --nocolor)
				sh_unsetvarcolors
				;;
			-q | --quiet)
				quiet=1
				;;
			-g | --grafico)
				grafico=1
				;;
			-a | --auto)
				LAUTO=1
				;;
			-i | -I | --install)
				LINSTALL=1
				appexec+=('sh_install')
				;;
			-c | -C | --chroot)
				LCHROOT=1
				appexec+=('sh_dryrun')
				;;
			*) die "operação não suportada: $1 (use -h for help)" ;;
		esac
		shift
	done
}

sh_mkefiroaming() {
	# Caminho de inicialização padrão/reserva
	msg "INFO" "$(log_info_msg "Criando diretorio: $dir_install/boot/efi/EFI/BOOT")"
	mkdir -p "$dir_install/boot/efi/EFI/BOOT" > /dev/null 2>&1
	evaluate_retval "$?" "$err_not_fatal"

	msg "INFO" "$(log_info_msg "Copiando caminho de inicialização padrão/reserva para: $dir_install/boot/efi/BOOT")"
	cp "$dir_install/boot/efi/EFI/$cnickefi/grubx64.efi" "$dir_install/boot/efi/EFI/BOOT/BOOTX64.EFI" 2> /dev/null
	evaluate_retval "$?" "$err_not_fatal"
}

sh_bootefi() {
	lEFI=$false
	if efivar --list > /dev/null 2>&1; then
		lEFI=$true
   fi
	[[ $lEFI -eq $true ]] && return 0 || return 1
}

sh_windowmanager() {
	local ctty='on'
	local cfluxbox='off'
	local copenbox='off'
	local cextra

	wm=$(${DIALOG} --radiolist "Gerenciador de janelas:\n\n$cextra"	\
		0 0 0																				\
		tty     	"Somente terminal, sem interface gráfica"	$ctty			\
		fluxbox	"Fluxbox"											$cfluxbox	\
		openbox	"Openbox" 											$copenbox	\
		2>&1 >/dev/tty )

	exit_status=$?
	case $exit_status in
		"$D_ESC"|"$D_CANCEL")
			"$DIALOG" --clear --backtitle "$ccabec" --yesno "Deseja sair sem instalar?" 0 0
			case $? in
	      	"$D_OK")
					die "Instalação abortada..."
	            ;;
				"$D_CANCEL")
					exit_status=99
					sh_windowmanager
					;;
			esac
		;;
	esac
}

sh_choosekeymap() {
	if localectl > /dev/null 2>&1; then
		items=$(localectl list-keymaps | sort -V)
	else
		items=$(find /usr/share/kbd/keymaps/ -iname "*.gz" -type f -printf "%f\n" | sort -V)
	fi
	options=()

	for item in ${items}; do
		options+=("${item%%.*}" "")
	done

	keymap=$(${DIALOG}                        		\
					--backtitle "${ccabec}"       		\
					--title "definir layout do teclado"	\
					--menu ""                     		\
					0 0 0                         		\
					"${options[@]}" 3>&1 1>&2 2>&3)

	nchoice=$?
	if ! (( nchoice )); then
		#loadkeys "$keymap"
		_KEYMAP="$keymap"
	fi
	return $nchoice
}

sh_install() {
	local apkgs=(base-system xz lvm2 wireless_tools mkinitcpio mkinitcpio-udev nano grub grub-x86_64-efi efivar efibootmgr os-prober)

	sh_umountfs
	sh_choosedisk
	sh_choosefilesystem
	sh_choosegrub
	if conf2 "*** KEYBOARD ***" "Current layout : $_KEYMAP" "\n\n$cmsgSetKeyboardLayout?"; then
		sh_choosekeymap
   fi
	sh_windowmanager
	sh_confadduser "$@"

	if ! sh_mkparted; then die "Erro"; fi
	if ! sh_mkfs 	 ; then die "Erro"; fi
	sh_checknet "$url_google" || return 1
	sh_checktarball
	sh_mountfs
	sh_mkdir

	msg "INFO" "$(log_info_msg "Instalando rootfs em $_PART_ROOT:$dir_install")"
	if tar xpf "$_TARBALL_ROOTFS" --xattrs-include='*.*' --numeric-owner -C $dir_install > /dev/null 2>&1; then
		evaluate_retval "$?"
		sh_initbind

		msg "INFO" "$(log_info_msg "Ajustando /etc/resolv.conf em $_PART_ROOT:$dir_install")"
		cp /etc/resolv.conf "$dir_install/etc/" > /dev/null 2>&1
		evaluate_retval "$?"

		sh_update_mirror
		sh_chroot_job "Atualizando repositorio em $_PART_ROOT:$dir_install" "xbps-install -Suy xbps"
		sh_chroot_job "Atualizando sistema em $_PART_ROOT:$dir_install" "xbps-install -uy"

		for pkg in "${apkgs[@]}"
		do
			sh_chroot_job "Instalando $pkg em $_PART_ROOT:$dir_install" "xbps-install -y $pkg"
		done

		sh_chroot_job "Instalando pacotes adicionais em $_PART_ROOT:$dir_install" "xbps-install -y $_PKGS"

		case "$mbr" in
			"BIOS") 	sh_chroot_job "Instalando GRUB i386-pc em $_PART_BIOS" "grub-install --target=i386-pc $_DEVICE --recheck"
						;;
		    "EFI") 	sh_chroot_job "Instalando GRUB EFI em $_PART_BOOT" "grub-install --target=x86_64-efi --efi-directory=/boot/efi --boot-directory=/boot --bootloader-id=$cnickefi --recheck"
						sh_mkefiroaming
						;;
		esac
		sh_chroot_job "Gerando grub.cfg em $_PART_ROOT:$dir_install" "grub-mkconfig -o /boot/grub/grub.cfg"
		sh_update_hostname
		sh_update_rc
		sh_update_timezone
		sh_chroot_job "Reconfigurando locales em $_PART_ROOT:$dir_install" "xbps-reconfigure -f glibc-locales"
		sh_update_locale
		sh_mkuser
		sh_mkfstab
		sh_set_keymap
		sh_update_bashrc
		sh_update_wpa_suplicant

		case "$wm" in
			"fluxbox") sh_fluxboxminimal;;
			"openbox") sh_openboxminimal;;
		esac

		sh_mkservice
		sh_chroot_job "Certificando que todos pacotes estejam configurados corretamente em $_PART_ROOT:$dir_install" "xbps-reconfigure -fa"
		sh_chroot_job "Removendo pacote bootstrap em $_PART_ROOT:$dir_install" "xbps-remove -y base-voidstrap" "$err_not_fatal"
		quiet=$false
		alerta "$ccabec" "Instalação finalizada com sucesso."
	else
		evaluate_retval "$?" "$err_not_fatal"
		die "Erro tar #$?. Problemas para descompactar o tarball $_TARBALL_ROOTFS em $dir_install"
	fi
	sh_umountfs
}

sh_ambiente
sh_ascii_lines
sh_setvarcolors
sh_logprefix
sh_checkDependencies
sh_config

[[ -z $1 ]] && {
   sh_usage
   exit $(($# ? 0 : 1))
}
init "$@"

# sanity checks
case $(( LINSTALL+LCHROOT )) in
      0) die 'nenhum operação especificada (use -h para ajuda)' ;;
   [^1]) die 'apenas uma operação pode ser usada por vez' ;;
esac
sh_checkroot
for x in "${appexec[@]}"; do $x; done
