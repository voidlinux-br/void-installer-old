#!/usr/bin/env bash

#  void-install
#  Created: 2022/12/24
#  Altered: 2022/12/25
#
#  Copyright (c) 2022-2022, Vilmar Catafesta <vcatafesta@gmail.com>
#                2022-2022, Felipe Nogueira <fnogueira@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#debug
#export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

#system
APP="${0##*/}"
_VERSION_='1.0.20221225'
readonly DEPENDENCIES=(tar wget sed cat chroot tput printf blkid fdisk mkfs.ext4 mkfs.ext2)

sh_ambiente() {
	export LC_ALL=C
	export LANG=C
	readonly dir_install='/mnt/voidlinux'
	readonly app_conf='void-install.conf'
	readonly BOOTLOG='/tmp/void-install.log'
	readonly URL_GOOGLE='https://google.com'
	readonly url_mirror='http://void.chililinux.com/voidlinux'
	readonly grafico=0
	readonly true=1
	readonly false=0
	: "${ccabec="$APP ${_VERSION_}"}"
	: echo "$tarball"

	if [ -z "${COLUMNS}" ]; then
   	COLUMNS=$(stty size)
	   COLUMNS=${COLUMNS##* }
	fi
	if [ "${COLUMNS}" = "0" ]; then
   	COLUMNS=80
	fi
	COL=$((COLUMNS - 8))
	SET_COL="\\033[${COL}G" # at the $COL char
	CURS_ZERO="\\033[0G"
}

sh_touchconf(){
   cat > "$app_conf" <<-'_EOF_'
######################################################################
# void-install.conf
# Gerado por void-install
######################################################################
_CONFIG='1'
_DEVICE='/dev/loop11'
_PART_BIOS="/dev/loop11p1"
_PART_BOOT="/dev/loop11p2"
_PART_ROOT="/dev/loop11p3"
_TARBALL_ROOTFS='void-x86_64-ROOTFS-20221001.tar.xz'
_USER="void"
_PASSWD_USER="void"
_PASSWD_ROOT="root"
_HOSTNAME="voidlinux"
_TIMEZONE="America/Porto_Velho"
_KEYMAP="br-abnt2"
_CLOCK="UTC"
_PKGS="vim"
#end
_EOF_
}

sh_config() {
	[[ -s "$app_conf" ]] || sh_touchconf
	# shellcheck source=/dev/null
	if 	[[ -f "$app_conf" ]]
	then 	source "$app_conf"
	else  die "ERRO: falha na abertura de $app_conf!"
	fi
}

sh_checkroot()
{
	if [ "$(id -u)" != "0" ]; then
		printf "%s\n" "${red} error: You cannot perform this operation unless you are root!"
		exit 1
   fi
}

sh_checknet() {
   xurl="$1"
   # have internet?
	msg "INFO" "$(log_info_msg "Testando internet em ${xurl}")"
   curl --insecure "$xurl" >/dev/null 2>&1 ||
      {
         evaluate_retval "$?"
         die "Sem rota para o servidor ($xurl) - Check sua conexão com a internet!"
		   return 1
      }
   evaluate_retval "$?"
   return $?
}

sh_checktarball() {
	msg "INFO" "$(log_info_msg "Checando existência do tarball rootfs $_TARBALL_ROOTFS")"
	if ! test -r "$_TARBALL_ROOTFS"; then
	   evaluate_retval 1
		msg "INFO" "$(log_info_msg "Tarball rootfs $_TARBALL_ROOTFS não localizado. Procedendoo com download")"
		curl --insecure --silent --remote-name "$url_mirror/live/current/$_TARBALL_ROOTFS" >/dev/null 2>&1 ||
      {
         evaluate_retval "$?"
         die "Sem rota para o servidor ($url_mirror) - Check sua conexão com a internet!"
		   return 1
      }
	fi
	evaluate_retval 0
   return $?
}

checkDependencies()
{
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}ERRO${reset}: não encontrei o comando ${cyan}'$d'${reset}"
	done
	if (( errorFound )); then
		echo "---IMPOSSÍVEL CONTINUAR---"
		echo "Esse script precisa dos comandos listados acima" >&2
		echo "Instale-os e/ou verifique se estão no seu \$PATH" >&2
		exit 1
	fi
}

setvarcolors() {
   reset=$(tput sgr0);        green=$(tput setaf 2);  red=$(tput setaf 124);
   pink=$(tput setaf 129);    bold=$(tput bold);      blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
   #yellow=$(tput setaf 136);
	#orange=$(tput setaf 166);
   #white=$(tput setaf 15);
   #violet=$(tput setaf 61);
	#purple=$(tput setaf 125);
}

unsetvarcolors() {
   reset='' green='' red='' pink='' bold='' blue='' cyan=''
	#yellow=''
	#orange=''
	#white=''
	#violet=''
   #purple=''
   NORMAL='' SUCCESS='' FAILURE='' BRACKET='' CURS_ZERO='' SUCCESS_PREFIX=''
   SET_COL='' SUCCESS_SUFFIX=''
}

log_prefix() {
   NORMAL="${reset}"   # Standard console grey
   SUCCESS="${green}"  # Success is green
   WARNING="${yellow}" # Warnings are yellow
   FAILURE="${red}"    # Failures are red
   BRACKET="${blue}" # Brackets are blue
   BMPREFIX="     "
   DOTPREFIX="  ${blue}::${reset} "
   SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL}"
   FAILURE_PREFIX="${FAILURE}*****${NORMAL}"
   WARNING_PREFIX="${WARNING}  W  ${NORMAL}"
   SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
   FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
   WARNING_SUFFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"
   WAIT_PREFIX="${WARNING}  R  ${NORMAL}"
   WAIT_SUFFIX="${BRACKET}[${WARNING} WAIT ${BRACKET}]${NORMAL}"
   FAILURE_PREFIX="${FAILURE}  X  ${NORMAL}"
}

replicate() {
   local Var
   printf -v Var %"$2s" " "  #  Coloca em $Var $1 espaços
   echo "${Var// /$1}"       #  Troca os espaços pelo caractere escolhido
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
}

log_info_msg() {
	last_msg="$@"
	echo -n -e "${BMPREFIX}${@}"
	return 0
}

evaluate_retval() {
   local error_value="$?"

   if [ $# -gt 0 ]; then
      error_value="$1"
   fi

	if [ "${error_value}" = 0 ]; then
   	log_success_msg2 ''
	else
   	log_failure_msg2 ''
   fi
   return "${error_value}"
}

log_failure_msg2() {
   echo -n -e "${BMPREFIX}${@}"
   echo    -e  "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<< $last_msg)
	echo -e "$(timespec) ${logmessage} OK" >> "${BOOTLOG}"
   return 0
}

log_success_msg()
{
	echo -n -e "${BMPREFIX}${@}"
	echo    -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<< $last_msg)
	echo -e "$(timespec) ${logmessage} OK" >> "${BOOTLOG}"
	return 0
}

log_success_msg2() {
   echo -n -e "${BMPREFIX}${@}"
   echo    -e  "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<< $last_msg)
	echo -e "$(timespec) ${logmessage} OK" >> "${BOOTLOG}"
   return 0
}

timespec() {
	STAMP="$(echo `date +"%b %d %T %:z"` `hostname`) [$FUNCNAME][$LINENO]"
	echo "$STAMP"
	return 0
}

msg() {
   if (( grafico )); then
      ${DIALOG}               \
      --no-collapse           \
      --title     "$1"        \
      --backtitle "$ccabec"   \
      --infobox   "\n$2"      \
      10 60
   else
      log_info_msg "$2"
   fi
}

die() {
	if test $# -ge 2; then
		evaluate_retval 1
	fi
   local msg=$1; shift
	printf "%-75s\n" "$(DOT)${bold}${red}$msg${reset}" >&2
   exit 1
}

conf()
{
   read -r -p "$1 [Y/n]"
   [[ ${REPLY^} == "" ]] && return $false
   [[ ${REPLY^} == N ]]  && return $true || return $false
}

sh_testdisk(){
	local result=0
	fdisk -l "$_DEVICE" > /dev/null 2>&1
	result="$?"
	evaluate_retval "$result"
	return "$result"
}

sh_mkparted(){
	msg "INFO" "$(log_info_msg "Testando disco ${_DEVICE} configurado em $app_conf")"
	if ! sh_testdisk; then
		die "Erro de leitura de disco: $_DEVICE. Check configuração em $app_conf"
	fi
	replicate "=" "$COLUMNS"
	if ! fdisk -l "$_DEVICE"; then
		die "Erro de leitura de disco: $_DEVICE. Check configuração em $app_conf"
	fi
	replicate "=" "$COLUMNS"
	echo "${red}AVISO, CUIDADO, tudo será apagado!!${reset}"
	replicate "=" "$COLUMNS"
	if conf "Continuar com o particionamento em ${_DEVICE} ?" ; then
		msg "INFO" "$(log_info_msg "Criando partições em ${_DEVICE}")"
	   parted --script "$_DEVICE" --                                   		\
	      mklabel gpt                                                       \
	      mkpart primary fat32      1MiB 3MiB   set 1 bios on name 1 BIOS   \
	      mkpart primary fat32      3MiB 128MiB set 2 esp  on name 2 EFI    \
	      mkpart primary ext4       128MiB 100%               name 3 ROOT   \
	      align-check optimal 1
		evaluate_retval "$?"
		#parted --script "$_DEVICE" -- print
	else
		die "Finalizando..."
	fi
}

sh_update_mirror() {
	msg "INFO" "$(log_info_msg "Atualizando mirror em $dir_install")"
	cat > "$dir_install/etc/xbps.d/00-reposytory-main.conf" <<-'_EOF_'
repository="$url_mirror"/current
repository="$url_mirror"/current/nonfree
repository="$url_mirror"/current/multilib
repository="$url_mirror"/current/multilib/nonfree
_EOF_
	evaluate_retval "$?"
}

sh_update_rc() {
	msg "INFO" "$(log_info_msg "Ajustando rc.local em $dir_install")"
	cat > "$dir_install/etc/rc.local" <<-'_EOF_'
HOSTNAME="${_HOSTNAME}"
HARDWARECLOCK="${_CLOCK}"
TIMEZONE="${_TIMEZONE}"
KEYMAP="${_KEYMAP}"
_EOF_
	evaluate_retval "$?"
}

sh_update_locale() {
	msg "INFO" "$(log_info_msg "Ajustando locale.conf em $dir_install")"
	cat > "$dir_install/etc/locale.conf" <<-'_EOF_'
LANG=en_US.UTF-8
LC_COLLATE=C
LC_ALL=en_US.UTF-8
_EOF_
	evaluate_retval "$?"
}

sh_update_hostname() {
	msg "INFO" "$(log_info_msg "Ajustando hostname em $dir_install")"
	echo "${_HOSTNAME}" > $dir_install/etc/hostname
	evaluate_retval "$?"
}

sh_update_timezone() {
	msg "INFO" "$(log_info_msg "Ajustando timezone em $dir_install")"
	sed -e "/en_US.UTF-8 UTF-8/s/^\#//" -i "$dir_install/etc/default/libc-locales"
	ln -s "$dir_install/usr/share/zoneinfo/${_TIMEZONE}" "$dir_install/etc/localtime"
	evaluate_retval "$?"
}

sh_mkfs() {
	msg "INFO" "$(log_info_msg "Formatando particao ${_PART_BOOT} FS ext2")"
	mkfs.ext2 -F -L "EFI" "${_PART_BOOT}" > /dev/null 2>&1
	evaluate_retval "$?"
	msg "INFO" "$(log_info_msg "Formatando particao ${_PART_ROOT} FS ext4")"
	mkfs.ext4 -F -L "VOID" "${_PART_ROOT}" > /dev/null 2>&1
	evaluate_retval "$?"
}

sh_umountfs(){
	msg "INFO" "$(log_info_msg "Desmontando sistema de arquivo em $dir_install")"
	umount -frl "$dir_install" > /dev/null 2>&1
	evaluate_retval "$?"
}

sh_bind() {
	msg "INFO" "$(log_info_msg "Binding sistema de arquivo em $dir_install")"
	mount -t proc  /proc "$dir_install/proc" > /dev/null 2>&1
	mount -t sysfs /sys  "$dir_install/sys"  > /dev/null 2>&1
	mount -o bind  /dev  "$dir_install/dev"  > /dev/null 2>&1
	evaluate_retval "$?"
}

sh_mkuser() {
	msg "INFO" "$(log_info_msg "Ajustando root passwd em $dir_install")"
	echo -e "${_PASSWD_ROOT}\n${_PASSWD_ROOT}" | chroot $dir_install passwd root > /dev/null 2>&1
	evaluate_retval "$?"
#	chroot "$dir_install" useradd -N -p "$(openssl passwd -1 "{$_PASSWD_USER}")" "${_USER}" > /dev/null 2>&1
#	chroot "$dir_install" usermod -G wheel,audio,users "${_USER}" > /dev/null 2>&1
	msg "INFO" "$(log_info_msg "Criando usuario $_USER e ajustando passwd em $dir_install")"
	chroot "$dir_install" /bin/bash -c "useradd -m ${_USER} -G audio,video,wheel,xbuilder -p ${_PASSWD_USER} > /dev/null 2>&1"
	chroot "$dir_install" /bin/bash -c "(echo ${_USER}:${_PASSWD_USER}) | chpasswd -m > /dev/null 2>&1"
	evaluate_retval "$?"
}

sh_mkfstab() {
	msg "INFO" "$(log_info_msg "Criando fstab em $dir_install")"
cat << EOF > "$dir_install/etc/fstab"
UUID=$(blkid -o value -s UUID "${_PART_BOOT}") /boot	ext2 defaults 0 2
UUID=$(blkid -o value -s UUID "${_PART_ROOT}") / 		ext4 defaults 0 1
EOF
	evaluate_retval "$?"
}

sh_mkservice() {
	msg "INFO" "$(log_info_msg "Configurando services em $dir_install")"
	chroot "$dir_install" /bin/bash -c "ln -s /etc/sv/agetty-tty1 /etc/runit/runsvdir/current/"		> /dev/null 2>&1
	chroot "$dir_install" /bin/bash -c "ln -s /etc/sv/agetty-tty2 /etc/runit/runsvdir/current/"		> /dev/null 2>&1
	chroot "$dir_install" /bin/bash -c "ln -s /etc/sv/dhcpcd /etc/runit/runsvdir/current/"				> /dev/null 2>&1
	chroot "$dir_install" /bin/bash -c "ln -s /etc/sv/wpa_supplicant /etc/runit/runsvdir/current/" 	> /dev/null 2>&1
	chroot "$dir_install" /bin/bash -c "ln -s /etc/sv/udevd /etc/runit/runsvdir/current/"          	> /dev/null 2>&1
	chroot "$dir_install" /bin/bash -c "ln -s /etc/sv/uuidd /etc/runit/runsvdir/current/"				> /dev/null 2>&1
	chroot "$dir_install" /bin/bash -c "ln -s /etc/sv/dmeventd /etc/runit/runsvdir/current/"			> /dev/null 2>&1
	evaluate_retval "$?"
}

sh_mkdir() {
	local cdir
	local adir=("$dir_install/boot"
					"$dir_install/boot/efi"
					"$dir_install/dev"
					"$dir_install/proc"
					"$dir_install/sys"
					"$dir_install/var/db/xbps/keys"
					"$dir_install/etc/xbps.d"
					)

	msg "INFO" "$(log_info_msg "Criando diretorios em $dir_install")"
	for cdir in "${adir[@]}"
	do
		[[ -d "$cdir" ]] || mkdir -p "$cdir"
	done
	evaluate_retval "$?"
}

sh_mount() {
	msg "INFO" "$(log_info_msg "Montando sistema de arquivos em $dir_install")"
	mkdir -p "$dir_install"
	mount "${_PART_ROOT}" "$dir_install"
	mkdir -p "$dir_install/boot"
	mount "${_PART_BOOT}" "$dir_install/boot"
	evaluate_retval "$?"
}

sh_install() {
	sh_umountfs
	if ! sh_mkparted; then die "Erro"; fi
	if ! sh_mkfs 	 ; then die "Erro"; fi
	sh_mount
	sh_mkdir

	msg "INFO" "$(log_info_msg "Instalando rootfs em $dir_install")"
	if tar xpf "$_TARBALL_ROOTFS" --xattrs-include='*.*' --numeric-owner -C $dir_install > /dev/null 2>&1; then
		evaluate_retval "$?"
		sh_bind
		msg "INFO" "$(log_info_msg "Ajustando /etc/resolv.conf em $dir_install")"
		cp /etc/resolv.conf "$dir_install/etc/" > /dev/null 2>&1
		evaluate_retval "$?"
		sh_update_mirror
		msg "INFO" "$(log_info_msg "Atualizando repositorio em $dir_install")"
		chroot "$dir_install" /bin/bash -c "xbps-install -Suy xbps" > /dev/null 2>&1
		evaluate_retval "$?"
		msg "INFO" "$(log_info_msg "Atualizando sistema em $dir_install")"
		chroot "$dir_install" /bin/bash -c "xbps-install -uy" > /dev/null 2>&1
		evaluate_retval "$?"
		msg "INFO" "$(log_info_msg "Instalando pacotes adicionais em $dir_install")"
		chroot "$dir_install" /bin/bash -c "xbps-install -y base-system base-minimal tar xz kmod" > /dev/null 2>&1
		chroot "$dir_install" /bin/bash -c "xbps-install -y e2fsprogs dosfstools lvm2 sudo iproute2 iputils" > /dev/null 2>&1
		chroot "$dir_install" /bin/bash -c "xbps-install -y dhcpcd wpa_supplicant wireless_tools iw kbd mdocml" > /dev/null 2>&1
		chroot "$dir_install" /bin/bash -c "xbps-install -y man-pages vim nano grub efivar efibootmgr os-prober" > /dev/null 2>&1
		chroot "$dir_install" /bin/bash -c "xbps-install -y mkinitcpio mkinitcpio-udev" > /dev/null 2>&1
		chroot "$dir_install" /bin/bash -c "xbps-install -y $_PKGS" > /dev/null 2>&1
		evaluate_retval "$?"
		msg "INFO" "$(log_info_msg "Instalando kernel em $dir_install")"
		chroot "$dir_install" /bin/bash -c "xbps-install -y linux linux-headers" > /dev/null 2>&1
		evaluate_retval "$?"
		msg "INFO" "$(log_info_msg "Instalando grub no $_DEVICE")"
		chroot "$dir_install" /bin/bash -c "grub-install $_DEVICE" > /dev/null 2>&1
		evaluate_retval "$?"
		msg "INFO" "$(log_info_msg "Gerando grub.cfg em $dir_install")"
		chroot "$dir_install" /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg" > /dev/null 2>&1
		evaluate_retval "$?"
		msg "INFO" "$(log_info_msg "Removendo pacote bootstrap em $dir_install")"
		chroot "$dir_install" /bin/bash -c "xbps-remove -y base-voidstrap" > /dev/null 2>&1
		evaluate_retval "$?"
		sh_update_hostname
		sh_update_rc
		sh_update_timezone
		msg "INFO" "$(log_info_msg "Reconfigurando locales em $dir_install")"
		chroot "$dir_install" /bin/bash -c "xbps-reconfigure -f glibc-locales" > /dev/null 2>&1
		evaluate_retval "$?"
		sh_update_locale
		sh_mkuser
		sh_mkfstab
		msg "INFO" "$(log_info_msg "Certificando que todos pacotes estejam configurados corretamente em $dir_install")"
		chroot "$dir_install" /bin/bash -c "xbps-reconfigure -fa" > /dev/null 2>&1
		evaluate_retval "$?"
		sh_mkservice
	else
		evaluate_retval "$?"
		die "Erro tar #$?. Problemas para descompactar o tarball $_TARBALL_ROOTFS em $dir_install"
	fi
	sh_umountfs
}

sh_ambiente
setvarcolors
log_prefix
msg "INFO" "$(log_info_msg "Configurando ambiente")"
sh_checkroot
checkDependencies
evaluate_retval "$?"
msg "INFO" "$(log_info_msg "Sanitizando ambiente")"
sh_config
evaluate_retval "$?"
sh_checknet "$URL_GOOGLE" || return 1
sh_checktarball
sh_install
